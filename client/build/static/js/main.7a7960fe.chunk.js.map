{"version":3,"sources":["actions/index.js","components/MessageList.js","components/Welcome.js","components/App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["SHOW_DETAIL","CLOSE_DETAIL","DELETE_SINGLE_MESSAGES_SUCCESS","DELETE_ALL_MESSAGES_SUCCESS","GET_MESSAGE_SUCCESS","ADD_MESSAGE_SUCCESS","ADD_MESSAGE_FAILURE","getMessageSuccess","response","type","addMessageSuccess","message","deleteAllMessagesSuccess","deletedMessage","deletedEntries","deleteSingleMessagesSuccess","id","addTodoFailure","error","payload","MessageList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","props","addMessage","inputMessage","current","value","setState","messageToAdd","inputDetail","React","createRef","state","list","index","_this2","console","log","_id","react_default","a","createElement","onClick","deleteSingle","className","fetchMessages","_this3","values","map","key","MessageText","details","closeDetail","ref","rows","cols","name","placeholder","showDetail","deleteAllMessages","Component","connect","messages","dispatch","fetch","then","res","json","catch","method","headers","Content-Type","body","JSON","stringify","err","concat","Welcome","Button","withRouter","_ref","history","push","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","initialState","detail","store","createStore","arguments","length","undefined","action","objectSpread","filter","applyMiddleware","thunk","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a7960fe.chunk.js","sourcesContent":["export const DELETE_ALL_MESSAGES = \"DELETE_ALL_MESSAGES\",ADD_MESSAGE = \"addMessage\", ADD_DETAIL = \"addDetail\", SHOW_DETAIL = \"showDetail\", CLOSE_DETAIL = \"closeDetail\"\n\nexport const DELETE_SINGLE_MESSAGES_SUCCESS = \"deleteSingle\", DELETE_ALL_MESSAGES_SUCCESS = \"DELETE_ALL_MESSAGES_SUCCESS\",GET_MESSAGE_SUCCESS = \"GET_MESSAGE_SUCCESS\", FETCH_MESSAGES = \"fetchMessages\", ADD_MESSAGE_STARTED = \"addMessageStarted\", ADD_MESSAGE_SUCCESS= \"addMessageSuccess\", ADD_MESSAGE_FAILURE = \"addMessageFailure\";\n\nexport const fetchMessages = () => dispatch => {\n\tfetch('/testAPI')\n\t  .then(res => res.json())\n\t  .then(\n\t\tmessage  => dispatch (getMessageSuccess(message)),\n\t  )\n\t  .catch(error => {\n\t\tconsole.log(error);\n\t  });\n  }\n\n  const getMessageSuccess = (response) =>{\n\t  return{\n\t\t  type: GET_MESSAGE_SUCCESS,\n\t\t  response,\n\t  }\n  }\n\nexport const addMessage = message =>{\n\treturn dispatch =>{\n\t\tfetch('/testAPI', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ message })\n\t\t})\n\t\t.then(res => res.json())\n\t\t.then(message => {\n\t\t\tdispatch(addMessageSuccess(message));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(addTodoFailure(err.message));\n\t\t});\n\t};\n};\n\nexport const deleteSingle = id =>{\n\tconsole.log(id)\n\treturn dispatch =>{\n\t\tfetch(`testAPI/${id}`, {\n\t\t\tmethod: 'DELETE',\n\t\t})\n\t\t.then(res => res.json())\n\t\t.then(response => {\n\t\t\tdispatch(deleteSingleMessagesSuccess(id));\n\t\t})\n\t\t.catch(err => console.error(err))\n\t};\n};\n\nexport const deleteAllMessages = id =>{\n\treturn dispatch =>{\n\t\tfetch('/testAPI', {\n\t\t\tmethod: 'DELETE',\n\t\t})\n\t\t.then(res => res.json())\n\t\t.then(deletedMessage => {\n\t\t\tdispatch(deleteAllMessagesSuccess(deletedMessage));\n\t\t})\n\t\t.catch(err => console.error(err))\n\t};\n};\n\n\nconst addMessageSuccess = message => ({\n\ttype: ADD_MESSAGE_SUCCESS,\n\tmessage: message\n});\n\nconst deleteAllMessagesSuccess = deletedMessage => {\n\treturn {\n\t\ttype: DELETE_ALL_MESSAGES_SUCCESS,\n\t\tdeletedEntries: deletedMessage,\n\t};\n};\n\nconst deleteSingleMessagesSuccess = id => {\n\treturn {\n\t\ttype: DELETE_SINGLE_MESSAGES_SUCCESS,\n\t\tid\n\t};\n};\n\nconst addTodoFailure = error => ({\n\ttype: ADD_MESSAGE_FAILURE,\n\tpayload: {\n\t\terror\n\t}\n});\n\n\nexport const showDetail = message => ({\n    type: SHOW_DETAIL,\n    message\n})\n\nexport const closeDetail = message => ({\n    type: CLOSE_DETAIL,\n    message\n})","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {fetchMessages,showDetail,deleteSingle,addMessage,closeDetail,deleteAllMessages} from \"../actions/index\"\nimport \"./style.css\"\n\nclass MessageList extends React.Component {\n  constructor(){\n    super();\n    this.inputMessage = React.createRef();\n    this.inputDetail = React.createRef();\n    this.state = {\n      list: [],\n      messageToAdd:\"\",\n      index:\"\"\n    };\n  }\n\n  MessageText(message){\n    console.log(\"HAHAHAHA\");\n    console.log(message);\n    console.log(message._id);\n    return <li onClick={() => this.props.deleteSingle(message._id)} className=\"fullMessage\">{message.message}</li>\n  }\n\n  submit= () =>{\n    this.props.addMessage(this.inputMessage.current.value)\n    this.setState({messageToAdd:\"\"})\n    this.inputMessage.current.value =\"\";\n    this.inputDetail.current.value =\"\";\n  }\n\n  componentDidMount() {\n    this.props.fetchMessages();\n  }\n\n\trender() {\n      const list = Object.values(this.props.list).map((message) =>\n      <ul key= {message.id} id=\"messagesList\">\n        {this.MessageText(message)}\n      </ul>\n      );\n      const details =\n        <div className=\"container center\">\n        <h3>Details View</h3>\n        {/* <h4>Details: {this.props.el.detail}</h4> */}\n        <h4>Details: {this.props.message}</h4>\n        <input type=\"button\" onClick={() => this.props.closeDetail()} value=\"Close\" className=\"button_close\"></input>\n        </div>\n      return(\n        <div className=\"container\">\n          <h4><strong>Messages want to add</strong></h4>\n          <textarea ref={this.inputMessage} type=\"text\"rows=\"8\" cols=\"80\" id=\"messagebox\" name=\"message\"\n          placeholder=\"Enter message here...\"></textarea><br></br>\n          <h4><strong>Details want to add</strong></h4>\n          <textarea ref={this.inputDetail} type=\"text\"rows=\"4\" cols=\"80\" id=\"deatailbox\" name=\"detail\"\n          placeholder=\"Enter details here...\"></textarea><br></br>\n          <br></br><input type=\"button\" value=\"Add\" id=\"addButton\" onClick={this.submit}></input><br></br><br></br>\n          <div className=\"message-list\">\n            {/* {this.props.el.showDetail? details : list} */}\n            {this.props.showDetail? details : list}\n          </div>\n          <input type=\"button\" onClick={() => this.props.deleteAllMessages()} value=\"Delete All Messages\" className=\"button_close\"></input>\n        </div>\n      );\n\t}\n}\n\n\nconst mapStateToProps = (state) => {\n  return{\n    list:state.messages,\n    showDetail:state.showDetail\n  }\n};\n\nconst mapDispatchToProps =  dispatch => {\n  // addMessage,showDetail,closeDetail\n  return {\n    fetchMessages:() => dispatch(fetchMessages()),\n    addMessage: (message) => dispatch(addMessage(message)),\n    closeDetail:() => dispatch(closeDetail('')),\n    deleteAllMessages:() => dispatch(deleteAllMessages()),\n    deleteSingle:(id) => dispatch(deleteSingle(id))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {fetchMessages,showDetail, addMessage,closeDetail,deleteAllMessages} from \"../actions/index\"\nimport \"./style.css\"\nimport MessageList from \"../components/MessageList\";\nimport { withRouter } from 'react-router-dom'\n\nclass Welcome extends React.Component {\n\n    Button = withRouter(({ history }) => (\n        <button\n          type='button'\n          onClick={() => { history.push('.src/components/MessageList.js') }}\n        >\n          Click Me!\n        </button>\n      ))\n\n    render() {\n        return(\n            <div className=\"container\">\n                  <h1>Welcome to Message Adding Tool</h1>\n                  {/* <Redirect to =\"/MessageList\" /> */}\n            </div>\n        )\n    }\n\n  }\n\nexport default Welcome;","import React from 'react';\nimport { BrowserRouter as Router,Route} from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport MessageList from \"../components/MessageList\";\nimport Welcome from \"../components/Welcome\";\n// import Page1 from './page1'\n\nconst App = () => {   //this is how you make a functional component\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Route path=\"/\" component={Welcome} />\n\t\t\t\t<Route path= \"/MessageTool\" component={MessageList} />\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport {SHOW_DETAIL, CLOSE_DETAIL, GET_MESSAGE_SUCCESS, DELETE_ALL_MESSAGES_SUCCESS,DELETE_SINGLE_MESSAGES_SUCCESS} from \"../actions/index\"\nimport {ADD_MESSAGE_SUCCESS, ADD_MESSAGE_FAILURE} from \"../actions/index\"\n\nconst initialState = {\n\tmessages: [],\n\tdetail: \"\",\n\tshowDetail:false,\n\tid:\"\"\n  };\n\nexport default function todosReducer(state = initialState, action) {\n\tswitch (action.type) {\n\tcase GET_MESSAGE_SUCCESS:\n\t\treturn{\n\t\t\t...state,\n\t\t\tmessages:action.response\n\t\t};\n\tcase ADD_MESSAGE_SUCCESS:\n\treturn {\n\t\t...state,\n\t\tmessages: state.messages.concat(action.message)\n\t};\n\tcase ADD_MESSAGE_FAILURE:\n\treturn {\n\t\t...state,\n\t\terror: action.payload.error\n\t};\n\tcase DELETE_ALL_MESSAGES_SUCCESS:\n\treturn {\n\t\t...state,\n\t\tmessages:[]\n\t};\n\tcase DELETE_SINGLE_MESSAGES_SUCCESS:\n\treturn {\n\t\t...state,\n\t\tmessages:state.messages.filter(state => state._id !== action.id)\n\t};\n\tcase SHOW_DETAIL:\n\t\treturn {\n\t\t\t...state,\n\t\t\tdetail: action.message,\n\t\t\tshowDetail:true\n\t\t};\n\tcase CLOSE_DETAIL:\n\treturn {\n\t\t...state,\n\t\tdetail: 'close detail',\n\t\tshowDetail:false\n\t};\n\tdefault:\n\treturn state;\n\t}\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './components/App';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}