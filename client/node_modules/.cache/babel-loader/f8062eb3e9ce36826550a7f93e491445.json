{"ast":null,"code":"import _objectSpread from \"/Users/es97/Desktop/CPSC 436I/Assignment/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from \"redux\";\nimport { ADD_MESSAGE, SHOW_DETAIL, CLOSE_DETAIL } from \"../actions/index\"; // import thunkMidddleware from 'redux-thunk'\n\nconst initialMessage = '[\"Welcome to message box\",\"First message here\",\"Second message here\"]';\nlet initialIndex = 1;\n\nfunction addMessage(message, index, detail = \"\") {\n  if (index === undefined) {\n    index = ++initialIndex;\n  }\n\n  return {\n    message: message,\n    index: index,\n    detail: detail\n  };\n}\n\nfunction initilize() {\n  let messageObj = JSON.parse(initialMessage);\n  let messageList = {};\n\n  for (let i = 0; i < messageObj.length; i++) {\n    let message = addMessage(messageObj[i]);\n    messageList[message.index] = message;\n  }\n\n  return messageList;\n}\n\nconst initialList = initilize();\n\nconst listReducer = (list = initialList, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      let message = addMessage(action.message, undefined, action.detail);\n      return _objectSpread({}, list, {\n        [message.index]: message\n      });\n\n    default:\n      return list;\n  }\n};\n\nconst elReducer = (el = {\n  showDetail: false,\n  message: \"Something is wrong\",\n  detail: \"you have no detail\"\n}, action) => {\n  if (action.type === SHOW_DETAIL) {\n    return {\n      showDetail: true,\n      message: action.message,\n      detail: action.detail\n    };\n  } else if (action.type === CLOSE_DETAIL) {\n    return {\n      showDetail: false,\n      message: \"Something is wrong\",\n      detail: \"you have no detail\"\n    };\n  }\n\n  return el;\n};\n\nexport default combineReducers({\n  list: listReducer,\n  el: elReducer // anotherKey: anotherReducer //all your reducers should be combined\n\n});","map":{"version":3,"sources":["/Users/es97/Desktop/CPSC 436I/Assignment/client/src/reducers/index.js"],"names":["combineReducers","ADD_MESSAGE","SHOW_DETAIL","CLOSE_DETAIL","initialMessage","initialIndex","addMessage","message","index","detail","undefined","initilize","messageObj","JSON","parse","messageList","i","length","initialList","listReducer","list","action","type","elReducer","el","showDetail"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAAQC,WAAR,EAAqBC,WAArB,EAAkCC,YAAlC,QAAqD,kBAArD,C,CACA;;AAEA,MAAMC,cAAc,GAAG,uEAAvB;AAGA,IAAIC,YAAY,GAAE,CAAlB;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,MAAM,GAAC,EAA3C,EAA8C;AAC7C,MAAGD,KAAK,KAAKE,SAAb,EAAuB;AACtBF,IAAAA,KAAK,GAAG,EAAEH,YAAV;AACA;;AACD,SAAO;AACNE,IAAAA,OAAO,EAAEA,OADH;AAENC,IAAAA,KAAK,EAAEA,KAFD;AAGNC,IAAAA,MAAM,EAAEA;AAHF,GAAP;AAKA;;AAED,SAASE,SAAT,GAAoB;AACnB,MAAIC,UAAU,GAAEC,IAAI,CAACC,KAAL,CAAWV,cAAX,CAAhB;AACA,MAAIW,WAAW,GAAG,EAAlB;;AACG,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAEJ,UAAU,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AAC1C,QAAIT,OAAO,GAAGD,UAAU,CAACM,UAAU,CAACI,CAAD,CAAX,CAAxB;AACMD,IAAAA,WAAW,CAACR,OAAO,CAACC,KAAT,CAAX,GAA6BD,OAA7B;AACN;;AACD,SAAOQ,WAAP;AACA;;AAED,MAAMG,WAAW,GAAGP,SAAS,EAA7B;;AAEA,MAAMQ,WAAW,GAAG,CAACC,IAAI,GAAGF,WAAR,EAAqBG,MAArB,KAAgC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACC,SAAKrB,WAAL;AACC,UAAIM,OAAO,GAAGD,UAAU,CAACe,MAAM,CAACd,OAAR,EAAgBG,SAAhB,EAA0BW,MAAM,CAACZ,MAAjC,CAAxB;AACD,+BAAWW,IAAX;AAAgB,SAACb,OAAO,CAACC,KAAT,GAAgBD;AAAhC;;AACC;AACA,aAAOa,IAAP;AALF;AAOA,CARD;;AAUA,MAAMG,SAAS,GAAG,CAACC,EAAE,GAAC;AAACC,EAAAA,UAAU,EAAE,KAAb;AAAoBlB,EAAAA,OAAO,EAAC,oBAA5B;AAAkDE,EAAAA,MAAM,EAAE;AAA1D,CAAJ,EAAqFY,MAArF,KAA+F;AAChH,MAAGA,MAAM,CAACC,IAAP,KAAgBpB,WAAnB,EAA+B;AAC9B,WAAO;AAACuB,MAAAA,UAAU,EAAC,IAAZ;AAAkBlB,MAAAA,OAAO,EAAEc,MAAM,CAACd,OAAlC;AAA2CE,MAAAA,MAAM,EAAEY,MAAM,CAACZ;AAA1D,KAAP;AACA,GAFD,MAEM,IAAGY,MAAM,CAACC,IAAP,KAAgBnB,YAAnB,EAAgC;AACrC,WAAO;AAACsB,MAAAA,UAAU,EAAE,KAAb;AAAoBlB,MAAAA,OAAO,EAAC,oBAA5B;AAAkDE,MAAAA,MAAM,EAAE;AAA1D,KAAP;AACA;;AACD,SAAOe,EAAP;AACA,CAPD;;AASA,eAAexB,eAAe,CAAC;AAC9BoB,EAAAA,IAAI,EAAED,WADwB;AAE9BK,EAAAA,EAAE,EAAED,SAF0B,CAG/B;;AAH+B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\nimport {ADD_MESSAGE, SHOW_DETAIL, CLOSE_DETAIL} from \"../actions/index\"\n// import thunkMidddleware from 'redux-thunk'\n\nconst initialMessage = '[\"Welcome to message box\",\"First message here\",\"Second message here\"]'\n\n\nlet initialIndex= 1;\nfunction addMessage(message, index, detail=\"\"){\n\tif(index === undefined){\n\t\tindex = ++initialIndex\n\t}\n\treturn {\n\t\tmessage: message,\n\t\tindex: index,\n\t\tdetail: detail\n\t}\n}\n\nfunction initilize(){\n\tlet messageObj =JSON.parse(initialMessage);\n\tlet messageList = {};\n    for (let i=0; i< messageObj.length; i++){\n\t\tlet message = addMessage(messageObj[i]);\n        messageList[message.index] = message;\n\t}\n\treturn messageList;\n}\n\nconst initialList = initilize();\n\nconst listReducer = (list = initialList, action) => {\n\tswitch(action.type){\n\t\tcase(ADD_MESSAGE):\n\t\t\tlet message = addMessage(action.message,undefined,action.detail);\n\t\treturn {...list,[message.index]:message};\n\t \tdefault:\n\t\t\treturn list;\n\t}\n};\n\nconst elReducer = (el={showDetail: false, message:\"Something is wrong\", detail: \"you have no detail\"}, action) =>{\n\tif(action.type === SHOW_DETAIL){\n\t\treturn {showDetail:true, message: action.message, detail: action.detail }\n\t}else if(action.type === CLOSE_DETAIL){\n\t\treturn {showDetail: false, message:\"Something is wrong\", detail: \"you have no detail\"};\n\t}\n\treturn el;\n}\n\nexport default combineReducers({\n\tlist: listReducer,\n\tel: elReducer\n// anotherKey: anotherReducer //all your reducers should be combined\n});\n\n"]},"metadata":{},"sourceType":"module"}