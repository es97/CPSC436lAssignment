{"ast":null,"code":"// import axios from 'axios'\nexport const DELETE_ALL_MESSAGES = \"DELETE_ALL_MESSAGES\",\n      ADD_MESSAGE = \"addMessage\",\n      ADD_DETAIL = \"addDetail\",\n      SHOW_DETAIL = \"showDetail\",\n      CLOSE_DETAIL = \"closeDetail\";\nexport const DELETE_ALL_MESSAGES_SUCCESS = \"DELETE_ALL_MESSAGES_SUCCESS\",\n      GET_MESSAGE_SUCCESS = \"GET_MESSAGE_SUCCESS\",\n      FETCH_MESSAGES = \"fetchMessages\",\n      ADD_MESSAGE_STARTED = \"addMessageStarted\",\n      ADD_MESSAGE_SUCCESS = \"addMessageSuccess\",\n      ADD_MESSAGE_FAILURE = \"addMessageFailure\";\nexport const fetchMessages = () => dispatch => {\n  fetch('/testAPI').then(res => res.json()).then( //messages =>\n  // dispatch({\n  //   type: FETCH_MESSAGES,\n  //   payload: messages\n  // }))\n  message => dispatch(getMessageSuccess(message.message, message.detail))).catch(error => {\n    console.log(error);\n  });\n};\n\nconst getMessageSuccess = response => {\n  return {\n    type: GET_MESSAGE_SUCCESS,\n    response\n  };\n}; // export const addMessage = (message, detail) =>{\n// \treturn dispatch =>{\n// \t\tdispatch(addMessageStarted())\n// \taxios\n//       .get('/testAPI')\n//       .then(res => {\n//         dispatch(addMessageSuccess(res.data));\n//       })\n//       .catch(err => {\n//         dispatch(addTodoFailure(err.message));\n// \t  });\n// \t};\n// };\n\n\nexport const addMessage = message => {\n  return dispatch => {\n    fetch('/testAPI', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message\n      })\n    }).then(res => res.json()).then(message => {\n      dispatch(addMessageSuccess(message));\n    }).catch(err => {\n      dispatch(addTodoFailure(err.message));\n    });\n  };\n};\nexport const deleteAllMessages = message => {\n  return dispatch => {\n    fetch('/testAPI', {\n      method: 'DELETE'\n    }).then(res => res.json()).then(deletedMessage => {\n      dispatch(deleteAllMessagesSuccess(deletedMessage));\n    }).catch(err => console.error(err));\n  };\n};\n\nconst addMessageStarted = () => ({\n  type: ADD_MESSAGE_STARTED\n});\n\nconst addMessageSuccess = message => ({\n  type: ADD_MESSAGE_SUCCESS,\n  message: message\n});\n\nconst deleteAllMessagesSuccess = deletedMessage => {\n  return {\n    type: DELETE_ALL_MESSAGES_SUCCESS,\n    deletedEntries: deletedMessage\n  };\n};\n\nconst addTodoFailure = error => ({\n  type: ADD_MESSAGE_FAILURE,\n  payload: {\n    error\n  }\n}); // export function addMessage(message,detail){\n// \treturn{\n// \t\ttype: ADD_MESSAGE,\n// \t\tmessage: message,\n// \t\tdetail: detail\n// \t}\n// }\n\n\nexport const showDetail = message => ({\n  type: SHOW_DETAIL,\n  message\n});\nexport const closeDetail = message => ({\n  type: CLOSE_DETAIL,\n  message\n}); // export function showDetail(message, detail){\n// \treturn{\n// \t\ttype: SHOW_DETAIL,\n// \t\tmessage: message,\n// \t\tdetail: detail\n// \t}\n// }\n// export function closeDetail() {\n//     return {type: CLOSE_DETAIL};\n// }","map":{"version":3,"sources":["/Users/es97/Desktop/CPSC 436I/Assignment/client/src/actions/index.js"],"names":["DELETE_ALL_MESSAGES","ADD_MESSAGE","ADD_DETAIL","SHOW_DETAIL","CLOSE_DETAIL","DELETE_ALL_MESSAGES_SUCCESS","GET_MESSAGE_SUCCESS","FETCH_MESSAGES","ADD_MESSAGE_STARTED","ADD_MESSAGE_SUCCESS","ADD_MESSAGE_FAILURE","fetchMessages","dispatch","fetch","then","res","json","message","getMessageSuccess","detail","catch","error","console","log","response","type","addMessage","method","headers","body","JSON","stringify","addMessageSuccess","err","addTodoFailure","deleteAllMessages","deletedMessage","deleteAllMessagesSuccess","addMessageStarted","deletedEntries","payload","showDetail","closeDetail"],"mappings":"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","sourcesContent":["// import axios from 'axios'\nexport const DELETE_ALL_MESSAGES = \"DELETE_ALL_MESSAGES\",ADD_MESSAGE = \"addMessage\", ADD_DETAIL = \"addDetail\", SHOW_DETAIL = \"showDetail\", CLOSE_DETAIL = \"closeDetail\"\n\nexport const DELETE_ALL_MESSAGES_SUCCESS = \"DELETE_ALL_MESSAGES_SUCCESS\",GET_MESSAGE_SUCCESS = \"GET_MESSAGE_SUCCESS\", FETCH_MESSAGES = \"fetchMessages\", ADD_MESSAGE_STARTED = \"addMessageStarted\", ADD_MESSAGE_SUCCESS= \"addMessageSuccess\", ADD_MESSAGE_FAILURE = \"addMessageFailure\";\n\nexport const fetchMessages = () => dispatch => {\n\tfetch('/testAPI')\n\t  .then(res => res.json())\n\t  .then(\n\t\t  //messages =>\n\t\t// dispatch({\n\t\t//   type: FETCH_MESSAGES,\n\t\t//   payload: messages\n\t\t// }))\n\t\tmessage  => dispatch (getMessageSuccess(message.message, message.detail)),\n\t  )\n\t  .catch(error => {\n\t\tconsole.log(error);\n\t  });\n  }\n\n  const getMessageSuccess = (response) =>{\n\t  return{\n\t\t  type: GET_MESSAGE_SUCCESS,\n\t\t  response,\n\t  }\n  }\n\n\n// export const addMessage = (message, detail) =>{\n// \treturn dispatch =>{\n// \t\tdispatch(addMessageStarted())\n// \taxios\n//       .get('/testAPI')\n//       .then(res => {\n//         dispatch(addMessageSuccess(res.data));\n//       })\n//       .catch(err => {\n//         dispatch(addTodoFailure(err.message));\n// \t  });\n// \t};\n// };\n\nexport const addMessage = message =>{\n\treturn dispatch =>{\n\t\tfetch('/testAPI', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ message })\n\t\t})\n\t\t.then(res => res.json())\n\t\t.then(message => {\n\t\t\tdispatch(addMessageSuccess(message));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(addTodoFailure(err.message));\n\t\t});\n\t};\n};\n\nexport const deleteAllMessages = message =>{\n\treturn dispatch =>{\n\t\tfetch('/testAPI', {\n\t\t\tmethod: 'DELETE',\n\t\t})\n\t\t.then(res => res.json())\n\t\t.then(deletedMessage => {\n\t\t\tdispatch(deleteAllMessagesSuccess(deletedMessage));\n\t\t})\n\t\t.catch(err => console.error(err))\n\t};\n};\n\n\nconst addMessageStarted = () => ({\n\ttype: ADD_MESSAGE_STARTED\n  });\n\nconst addMessageSuccess = message => ({\n\ttype: ADD_MESSAGE_SUCCESS,\n\tmessage: message\n});\n\nconst deleteAllMessagesSuccess = deletedMessage => {\n\treturn {\n\t\ttype: DELETE_ALL_MESSAGES_SUCCESS,\n\t\tdeletedEntries: deletedMessage,\n\t};\n};\n\nconst addTodoFailure = error => ({\n\ttype: ADD_MESSAGE_FAILURE,\n\tpayload: {\n\t\terror\n\t}\n});\n\n// export function addMessage(message,detail){\n// \treturn{\n// \t\ttype: ADD_MESSAGE,\n// \t\tmessage: message,\n// \t\tdetail: detail\n// \t}\n// }\n\nexport const showDetail = message => ({\n    type: SHOW_DETAIL,\n    message\n})\n\nexport const closeDetail = message => ({\n    type: CLOSE_DETAIL,\n    message\n})\n\n// export function showDetail(message, detail){\n// \treturn{\n// \t\ttype: SHOW_DETAIL,\n// \t\tmessage: message,\n// \t\tdetail: detail\n// \t}\n// }\n\n// export function closeDetail() {\n//     return {type: CLOSE_DETAIL};\n// }"]},"metadata":{},"sourceType":"module"}