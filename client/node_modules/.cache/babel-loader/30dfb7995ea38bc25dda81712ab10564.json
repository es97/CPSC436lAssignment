{"ast":null,"code":"import _objectSpread from \"/Users/es97/Desktop/CPSC 436I/Assignment/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from \"redux\";\nimport { ADD_MESSAGE, SHOW_DETAIL, CLOSE_DETAIL, GET_MESSAGE_SUCCESS } from \"../actions/index\";\nimport { ADD_MESSAGE_SUCCESS, DELETE_ALL_MESSAGES_SUCCESS, ADD_MESSAGE_FAILURE } from \"../actions/index\"; // import thunkMidddleware from 'redux-thunk'\n// const initialMessage = '[\"Welcome to message box\",\"First message here\",\"Second message here\"]'\n\nlet initialIndex = 1;\n\nfunction addMessage(message, index, detail = \"\") {\n  if (index === undefined) {\n    index = ++initialIndex;\n  }\n\n  return {\n    message: message,\n    index: index,\n    detail: detail\n  };\n}\n\nconst initialState = {\n  // loading: false,\n  messages: [],\n  detail: \"\",\n  // error: null,\n  showDetail: false\n}; // export default function todosReducer(state = initialState, action) {\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    //   case ADD_MESSAGE_STARTED:\n    // \treturn {\n    // \t  ...state,\n    // \t  loading: true\n    // \t  messages:action.response\n    // \t};\n    case GET_MESSAGE_SUCCESS:\n      return _objectSpread({}, state, {\n        messages: action.response\n      });\n\n    case ADD_MESSAGE_SUCCESS:\n      let message = addMessage(action.message, undefined, action.detail);\n      return _objectSpread({}, state, {\n        messages: state.messages.concat(message)\n      });\n\n    case ADD_MESSAGE_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case DELETE_ALL_MESSAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        message: []\n      });\n    // case SHOW_DETAIL:\n    // \treturn {\n    // \t\t...state,\n    // \t\tdetail: action.message,\n    // \t\tshowDetail:true\n    // \t};\n    // case CLOSE_DETAIL:\n    // return {\n    // \t...state,\n    // \tdetail: 'close detail',\n    // \tshowDetail:false\n    // };\n\n    default:\n      return state;\n  }\n} //   const listReducer = (list = initialState, action) => {\n// \t\tswitch(action.type){\n// \t\t\tcase(ADD_MESSAGE):\n// \t\t\t\tlet message = addMessage(action.message,undefined,action.detail);\n// \t\t\treturn {...list,[message.index]:message};\n// \t\t \tdefault:\n// \t\t\t\treturn list;\n// \t\t}\n// \t};\n// const listReducer = (list = initialList, action) => {\n// \tswitch(action.type){\n// \t\tcase(ADD_MESSAGE):\n// \t\t\tlet message = addMessage(action.message,undefined,action.detail);\n// \t\treturn {...list,[message.index]:message};\n// \t \tdefault:\n// \t\t\treturn list;\n// \t}\n// };\n// const elReducer = (el={showDetail: false, message:\"Something is wrong\", detail: \"you have no detail\"}, action) =>{\n// \tif(action.type === SHOW_DETAIL){\n// \t\treturn {showDetail:true, message: action.message, detail: action.detail }\n// \t}else if(action.type === CLOSE_DETAIL){\n// \t\treturn {showDetail: false, message:\"Something is wrong\", detail: \"you have no detail\"};\n// \t}\n// \treturn el;\n// }\n// export default combineReducers({\n// \tlist: listReducer,\n// \tel: elReducer\n// // anotherKey: anotherReducer //all your reducers should be combined\n// });","map":{"version":3,"sources":["/Users/es97/Desktop/CPSC 436I/Assignment/client/src/reducers/index.js"],"names":["combineReducers","ADD_MESSAGE","SHOW_DETAIL","CLOSE_DETAIL","GET_MESSAGE_SUCCESS","ADD_MESSAGE_SUCCESS","DELETE_ALL_MESSAGES_SUCCESS","ADD_MESSAGE_FAILURE","initialIndex","addMessage","message","index","detail","undefined","initialState","messages","showDetail","todosReducer","state","action","type","response","concat","error","payload"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAAQC,WAAR,EAAqBC,WAArB,EAAkCC,YAAlC,EAAgDC,mBAAhD,QAA0E,kBAA1E;AACA,SAAQC,mBAAR,EAA6BC,2BAA7B,EAA0DC,mBAA1D,QAAoF,kBAApF,C,CACA;AAEA;;AAGA,IAAIC,YAAY,GAAE,CAAlB;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,MAAM,GAAC,EAA3C,EAA8C;AAC7C,MAAGD,KAAK,KAAKE,SAAb,EAAuB;AACtBF,IAAAA,KAAK,GAAG,EAAEH,YAAV;AACA;;AACD,SAAO;AACNE,IAAAA,OAAO,EAAEA,OADH;AAENC,IAAAA,KAAK,EAAEA,KAFD;AAGNC,IAAAA,MAAM,EAAEA;AAHF,GAAP;AAKA;;AAED,MAAME,YAAY,GAAG;AACpB;AACAC,EAAAA,QAAQ,EAAE,EAFU;AAGpBH,EAAAA,MAAM,EAAE,EAHY;AAIpB;AACAI,EAAAA,UAAU,EAAC;AALS,CAArB,C,CAQA;;AACC,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,YAA9B,EAA4CK,MAA5C,EAAoD;AACnE,UAAQA,MAAM,CAACC,IAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKhB,mBAAL;AACC,+BACIc,KADJ;AAECH,QAAAA,QAAQ,EAACI,MAAM,CAACE;AAFjB;;AAID,SAAKhB,mBAAL;AACC,UAAIK,OAAO,GAAGD,UAAU,CAACU,MAAM,CAACT,OAAR,EAAgBG,SAAhB,EAA0BM,MAAM,CAACP,MAAjC,CAAxB;AACA,+BACIM,KADJ;AAECH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeO,MAAf,CAAsBZ,OAAtB;AAFX;;AAID,SAAKH,mBAAL;AACA,+BACIW,KADJ;AAECK,QAAAA,KAAK,EAAEJ,MAAM,CAACK,OAAP,CAAeD;AAFvB;;AAIA,SAAKjB,2BAAL;AACA,+BACIY,KADJ;AAECR,QAAAA,OAAO,EAAC;AAFT;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,aAAOQ,KAAP;AAzCA;AA2CE,C,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from \"redux\";\nimport {ADD_MESSAGE, SHOW_DETAIL, CLOSE_DETAIL, GET_MESSAGE_SUCCESS} from \"../actions/index\"\nimport {ADD_MESSAGE_SUCCESS, DELETE_ALL_MESSAGES_SUCCESS, ADD_MESSAGE_FAILURE} from \"../actions/index\"\n// import thunkMidddleware from 'redux-thunk'\n\n// const initialMessage = '[\"Welcome to message box\",\"First message here\",\"Second message here\"]'\n\n\nlet initialIndex= 1;\nfunction addMessage(message, index, detail=\"\"){\n\tif(index === undefined){\n\t\tindex = ++initialIndex\n\t}\n\treturn {\n\t\tmessage: message,\n\t\tindex: index,\n\t\tdetail: detail\n\t}\n}\n\nconst initialState = {\n\t// loading: false,\n\tmessages: [],\n\tdetail: \"\",\n\t// error: null,\n\tshowDetail:false\n  };\n\n// export default function todosReducer(state = initialState, action) {\n\texport default function todosReducer(state = initialState, action) {\n\tswitch (action.type) {\n\t//   case ADD_MESSAGE_STARTED:\n\t// \treturn {\n\t// \t  ...state,\n\t// \t  loading: true\n\t// \t  messages:action.response\n\t// \t};\n\tcase GET_MESSAGE_SUCCESS:\n\t\treturn{\n\t\t\t...state,\n\t\t\tmessages:action.response\n\t\t};\n\tcase ADD_MESSAGE_SUCCESS:\n\t\tlet message = addMessage(action.message,undefined,action.detail);\n\t\treturn {\n\t\t\t...state,\n\t\t\tmessages: state.messages.concat(message)\n\t\t};\n\tcase ADD_MESSAGE_FAILURE:\n\treturn {\n\t\t...state,\n\t\terror: action.payload.error\n\t};\n\tcase DELETE_ALL_MESSAGES_SUCCESS:\n\treturn {\n\t\t...state,\n\t\tmessage:[]\n\t};\n\t// case SHOW_DETAIL:\n\t// \treturn {\n\t// \t\t...state,\n\t// \t\tdetail: action.message,\n\t// \t\tshowDetail:true\n\t// \t};\n\t// case CLOSE_DETAIL:\n\t// return {\n\t// \t...state,\n\t// \tdetail: 'close detail',\n\t// \tshowDetail:false\n\t// };\n\tdefault:\n\treturn state;\n\t}\n  }\n\n//   const listReducer = (list = initialState, action) => {\n// \t\tswitch(action.type){\n// \t\t\tcase(ADD_MESSAGE):\n// \t\t\t\tlet message = addMessage(action.message,undefined,action.detail);\n// \t\t\treturn {...list,[message.index]:message};\n// \t\t \tdefault:\n// \t\t\t\treturn list;\n// \t\t}\n// \t};\n\n\n// const listReducer = (list = initialList, action) => {\n// \tswitch(action.type){\n// \t\tcase(ADD_MESSAGE):\n// \t\t\tlet message = addMessage(action.message,undefined,action.detail);\n// \t\treturn {...list,[message.index]:message};\n// \t \tdefault:\n// \t\t\treturn list;\n// \t}\n// };\n\n// const elReducer = (el={showDetail: false, message:\"Something is wrong\", detail: \"you have no detail\"}, action) =>{\n// \tif(action.type === SHOW_DETAIL){\n// \t\treturn {showDetail:true, message: action.message, detail: action.detail }\n// \t}else if(action.type === CLOSE_DETAIL){\n// \t\treturn {showDetail: false, message:\"Something is wrong\", detail: \"you have no detail\"};\n// \t}\n// \treturn el;\n// }\n\n// export default combineReducers({\n// \tlist: listReducer,\n// \tel: elReducer\n// // anotherKey: anotherReducer //all your reducers should be combined\n// });\n\n"]},"metadata":{},"sourceType":"module"}